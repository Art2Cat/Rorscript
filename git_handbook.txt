# init git repository
git init

# set a new remote
git remote add origin https://github.com/user/repo.git

# verify new remote
git remote -v

# add file changes to repository
git add filename

# add all changes to repository
git add --all

# show commit logs
git log

# show the last 3 commits
git log -n 3

# show the log with oneline output format
git log --oneline

# show the log with full output format
git log --format=fuller

# show the log with change full/short status
git log --stat/--shortstat

# show the log display as graph
git log --graph

# composition usage
git log -n 3 --oneline --shortstat --graph

# show logs between date range
git log --since='MAR 1 2018' --until='MAR 15 2018'

# exclude author from logs
git log --perl-regexp --author='^((?!excluded-author-regex).*)'

# show which commit
git log --summary -M90% | grep -e "^ rename"

# track file move history
git log --follow file_name

# show the changes status
git status

# show the changes status with short format
git status --short

# remove file/directory from staging area
git reset HEAD file_name file_path

# remove current directory from staging area
git reset HEAD .

# reset current branch to any commit hash
git reset --hard 39ea21a

# saving current state of tracked files without commiting
git stash

# saving current state of unstaged changes to tracked files
git stash -k

# saving current state including untracked files
git stash -u

# saving current state with message
git stash save <message>

# saving current state of all files (ignored, untracked, and tracked)
git stash -a

# show list of all saved stashes
git stash list

# apply any stash without deleting from the stashed list
git stash apply <stash@{n}>

# apply last stashed state and delete it from stashed list
git stash pop

# delete all stored stashes
git stash clear
or
git stash drop <stash@{n}>

# grab a single file from a stash
git checkout <stash@{n}> -- <file_path>
or
git checkout stash@{0} -- <file_path>

# create a new branch base current branch
git branch <branch-name>

# create and switch new branch
git checkout -b <branch-name>

# switch to other branch
git checkout <branch-name>

# force switch branch and will dispose of some partial changes
git checkout --force <branch-name>

# create a branch from any commit hash
git branch <branch-name> 38b7da45e

# track upstream branch
git branch -u origin/mybranch

# delete local branch
git branch -d <local_branch_name>

# delete remote branch
git push origin --delete <remote_branch_name>
or
git push origin :<remote_branch_name>

# merge conflict use mergetool
git mergetool

# checkout our files or their files
git checkout --ours/--theirs <file_path>

# add current directory to track
git add .

# cancel merge
git reset --merge

# git merge without fastmerge
git merge --no-ff <branch_name>

# show merge log
git log --merges

# show the first parent merge log
git log --first-parent --oneline R1.0..master

# show our changes without their changes
git log MERGE_HEAD..HEAD
or
git diff --stat <hash> HEAD

# show their changes without ours changes
git log HEAD..MERGE_HEAD
or
git diff --stat <hash> MERGE_HEAD

# merge activity branches to master use git rebase
git rebase master

# merge remote branches to master use pull --rebase
git pull --rebase

# merge activity branches to master use git rebase
# --continue  continue previous rebase
# --abort     cancel current rebase
# --skip      skip conflict changes
git rebase master --continue/--abort/--skip

# merge master to other branch
git rebase master --onto <branch_name>

# remove remote tag
git remote rm <tag_name>

# fetch changes from other library
git fetch <tag_name>

# create a tag on master branch
git tag <tag_name> master -m "new tag"

# push branch's tag to library
git push origin <tag_name>
or
git push --tags

# pull changes from remote branches without tags
git pull --no-tags

# list tags
git tag -l

# print tags hashcode
git show-ref --tags

# show log with tag
git log --decorate

# check commit in which tags
git tag --contains <hash>
or
git log --oneline <tag_name> | grep "${comment}"

# track local branch history
git log --walk-reflogs <branch_name>

# ignore some of the already-versioned files
git update-index --assume-unchanged <file_path>

# cancel ignore some of the already-versioned files
git update-index --no-assume-unchanged <file_path>

# check the file modification content
git diff <file_path>

# check continuity text file modification content
git diff --word-diff <file_path>


